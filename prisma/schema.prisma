// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Band {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @db.VarChar(255)
  data      Json?
  bandUsers BandUser[]
}

model Setlist {
  id            Int            @id @default(autoincrement())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  name          String         @db.VarChar(255)
  data          Json?
  setlist_Users Setlist_User[]
}

model BandUser {
  id      Int    @id @default(autoincrement())
  band    Band   @relation(fields: [band_id], references: [id])
  band_id Int
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
}

model Setlist_User {
  id         Int     @id @default(autoincrement())
  setlist    Setlist @relation(fields: [setlist_id], references: [id])
  setlist_id Int
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?        @db.Text
  accounts      Account[]
  sessions      Session[]
  bandUsers     BandUser[]
  Setlist_User  Setlist_User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
